version: 2

models:
  # -----------------------------
  # mart_game_facts TESTS
  # -----------------------------
  - name: mart_game_facts
    description: "Match-level facts: scores, result, points."
    columns:
      - name: game_id
        tests:
          - not_null
          - unique

      - name: competition_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_competitions')
              field: competition_id

      - name: home_club_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_clubs')
              field: club_id

      - name: away_club_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_clubs')
              field: club_id

      - name: home_club_goals
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: away_club_goals
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: result
        tests:
          - accepted_values:
              values: ['home_win', 'away_win', 'draw']

      - name: home_points
        tests:
          - accepted_values:
              values: [0, 1, 3]

      - name: away_points
        tests:
          - accepted_values:
              values: [0, 1, 3]

  # -----------------------------
  # mart_player_season TESTS
  # -----------------------------
  - name: mart_player_season
    description: "Player-season aggregates with per90 + efficiency."
    columns:
      - name: player_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_players')
              field: player_id

      - name: season
        tests:
          - not_null

      - name: games_played
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: minutes_played
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: goals
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: assists
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: yellow_cards
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: red_cards
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: has_600_minutes
        tests:
          - accepted_values:
              values: [true, false]

      - name: goals_per90
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: assists_per90
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: goal_plus_assist_per90
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: efficiency_score
        description: "Efficiency score based on per90 with minutes threshold."
        tests:
          - dbt_utils.accepted_range:
              min_value: -5

  # -----------------------------
  # mart_club_season TESTS
  # -----------------------------
  - name: mart_club_season
    description: "Club × Season level aggregates (match results + squad stats)."
    columns:
      - name: club_id
        description: "Club ID."
        tests:
          - not_null
          - relationships:
              to: ref('stg_clubs')
              field: club_id

      - name: season
        description: "Season ID."
        tests:
          - not_null

      - name: name
        description: "Club name (from stg_clubs)."
        tests:
          - not_null

      - name: games_played
        description: "Total number of games in the season."
        tests:
          - not_null

      - name: points
        description: "Total points."
        tests:
          - not_null

    tests:
      # PK-like check: (club_id, season) must be unique
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: ['club_id', 'season']

      # Games played must equal sum of W/D/L
      - dbt_utils.expression_is_true:
          name: mart_club_season_match_count_rule
          expression: "GAMES_PLAYED = (WINS + DRAWS + LOSSES)"

      # Points rule: 3*W + 1*D
      - dbt_utils.expression_is_true:
          name: mart_club_season_points_rule
          expression: "POINTS = (WINS * 3) + (DRAWS * 1)"

      # Goal difference must equal GF - GA
      - dbt_utils.expression_is_true:
          name: mart_club_season_goal_diff_rule
          expression: "GOAL_DIFFERENCE = (GOALS_FOR - GOALS_AGAINST)"

      # All aggregate metrics must be non-negative
      - dbt_utils.expression_is_true:
          name: mart_club_season_non_negative_metrics
          expression: "GAMES_PLAYED >= 0 AND WINS >= 0 AND DRAWS >= 0 AND LOSSES >= 0 AND POINTS >= 0 AND GOALS_FOR >= 0 AND GOALS_AGAINST >= 0 AND SQUAD_SIZE >= 0 AND SQUAD_GOALS >= 0 AND SQUAD_ASSISTS >= 0 AND SQUAD_YELLOW_CARDS >= 0 AND SQUAD_RED_CARDS >= 0"
  # -----------------------------
  # mart_competition_club_season TESTS
  # -----------------------------
  - name: mart_competition_club_season
    description: "Club × Competition × Season aggregates: W/D/L, points, GF/GA, GD, squad stats."
    columns:
      - name: competition_id
        description: "Competition ID."
        tests:
          - not_null
          - relationships:
              to: ref('stg_competitions')
              field: competition_id

      - name: season
        description: "Season label."
        tests:
          - not_null

      - name: club_id
        description: "Club ID."
        tests:
          - not_null
          - relationships:
              to: ref('stg_clubs')
              field: club_id

      - name: competition_name
        description: "Competition name (from stg_competitions)."
        tests:
          - not_null

      - name: club_name
        description: "Club name (from stg_clubs)."
        tests:
          - not_null

      - name: games_played
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0

      - name: wins
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: draws
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: losses
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: points
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: goals_for
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: goals_against
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: goal_difference
        tests:
          - not_null

      - name: squad_size
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: squad_goals
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: squad_assists
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: squad_yellow_cards
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: squad_red_cards
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

    tests:
      # Uniqueness per competition × season × club
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: [ 'competition_id', 'season', 'club_id' ]

      # Identities
      - dbt_utils.expression_is_true:
          name: mart_comp_season_games_identity
          expression: "GAMES_PLAYED = (WINS + DRAWS + LOSSES)"

      - dbt_utils.expression_is_true:
          name: mart_comp_season_gd_identity
          expression: "GOAL_DIFFERENCE = (GOALS_FOR - GOALS_AGAINST)"

      # Points rule (set WARN to be safe for cups)
      - dbt_utils.expression_is_true:
          name: mart_comp_season_points_rule
          expression: "POINTS = (WINS * 3) + (DRAWS * 1)"
          config:
            severity: warn
  # -----------------------------
  # mart_competition_player_season TESTS
  # -----------------------------
  - name: mart_competition_player_season
    description: "Player × Competition × Season aggregates with per90 and season-end valuation."
    columns:
      - name: competition_id
        description: "Competition ID."
        tests:
          - not_null
          - relationships:
              to: ref('stg_competitions')
              field: competition_id

      - name: season
        description: "Season label."
        tests:
          - not_null

      - name: player_id
        description: "Player ID."
        tests:
          - not_null
          - relationships:
              to: ref('stg_players')
              field: player_id

      - name: competition_name
        description: "Competition name (from stg_competitions)."
        tests:
          - not_null

      - name: games_played
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: minutes_played
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: goals
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: assists
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: yellow_cards
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: red_cards
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

      - name: has_180_minutes
        tests:
          - accepted_values:
              values: [ true, false ]

      - name: total_goals_and_assists
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0

      - name: season_last_value_eur
        tests:
          - dbt_utils.accepted_range:
              min_value: 0

    tests:
      # Grain: unique per competition × season × player
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: [ 'competition_id','season','player_id' ]

      # Identity: total_goals_and_assists = goals + assists
      - dbt_utils.expression_is_true:
          name: mpcs_total_ga_identity
          expression: "TOTAL_GOALS_AND_ASSISTS = (GOALS + ASSISTS)"

      # Per90 null policy: per90 metrics must be NULL when minutes < 180, present otherwise
      - dbt_utils.expression_is_true:
          name: mpcs_per90_null_rule
          expression: "(HAS_180_MINUTES = TRUE AND GOALS_PER90 IS NOT NULL AND ASSISTS_PER90 IS NOT NULL AND GOAL_PLUS_ASSIST_PER90 IS NOT NULL) OR (HAS_180_MINUTES = FALSE AND GOALS_PER90 IS NULL AND ASSISTS_PER90 IS NULL AND GOAL_PLUS_ASSIST_PER90 IS NULL)"

      # Per90 non-negative when present
      - dbt_utils.expression_is_true:
          name: mpcs_per90_non_negative
          expression: "(GOALS_PER90 IS NULL OR GOALS_PER90 >= 0) AND (ASSISTS_PER90 IS NULL OR ASSISTS_PER90 >= 0) AND (GOAL_PLUS_ASSIST_PER90 IS NULL OR GOAL_PLUS_ASSIST_PER90 >= 0)"
  # -----------------------------------------------------------------------------
  # mart_transferx_player
  # -----------------------------------------------------------------------------
  - name: mart_transferx_player
    description: "Transfer-level table with normalized categories and loan detection."
    tests:
      # Every row must map to one unique player-move event.
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - player_id
            - transfer_date
            - from_club_id
            - to_club_id

    columns:
      # --- identity & core fields ---
      - name: player_id
        description: "FK to player."
        tests:
          - not_null

      - name: transfer_date
        description: "Event date."
        tests:
          - not_null

      - name: season
        description: "Season key (July→June)."
        tests:
          - not_null

      - name: transfer_category
        description: "Normalized category."
        tests:
          # enforce the exact label set you defined
          - accepted_values:
              values: [ 'loan_out','loan_return','free','retired_or_without_club','paid_transfer','other' ]

      - name: is_loan_out
        description: "Part of loan pair: A→B zero-fee, the outgoing leg."
        tests:
          - accepted_values:
              values: [ true, false ]

      - name: is_loan_return
        description: "Part of loan pair: B→A zero-fee, the return leg."
        tests:
          - accepted_values:
              values: [ true, false ]

      - name: is_free_transfer
        description: "Zero transfer fee."
        tests:
          - accepted_values:
              values: [ true, false ]

      - name: is_retired_or_without_club
        description: "Retired / Without Club flag."
        tests:
          - accepted_values:
              values: [ true, false ]
  # -----------------------------------------------------------------------------
  # mart_transferx_club
  # -----------------------------------------------------------------------------
  - name: mart_transferx_club
    description: "Club-season transfer aggregates (spend/income, counts, loan splits)."
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: [club_id, season]

      - dbt_utils.expression_is_true:
          name: mart_transferx_club_incoming_free_rate_range
          expression: "incoming_free_rate IS NULL OR (incoming_free_rate >= 0 AND incoming_free_rate <= 1)"
      - dbt_utils.expression_is_true:
          name: mart_transferx_club_incoming_paid_rate_range
          expression: "incoming_paid_rate IS NULL OR (incoming_paid_rate >= 0 AND incoming_paid_rate <= 1)"
      - dbt_utils.expression_is_true:
          name: mart_transferx_club_outgoing_paid_rate_range
          expression: "outgoing_paid_rate IS NULL OR (outgoing_paid_rate >= 0 AND outgoing_paid_rate <= 1)"

    columns:
      - name: club_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_clubs')
              field: club_id

      - name: season
        tests: [not_null]

      - name: incoming_total
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"
      - name: outgoing_total
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"
      - name: incoming_free_cnt
        tests: [{ dbt_utils.expression_is_true: { expression: ">= 0" } }]
      - name: incoming_paid_cnt
        tests: [{ dbt_utils.expression_is_true: { expression: ">= 0" } }]
      - name: incoming_loan_cnt
        tests: [{ dbt_utils.expression_is_true: { expression: ">= 0" } }]
      - name: incoming_loan_return_cnt
        tests: [{ dbt_utils.expression_is_true: { expression: ">= 0" } }]
      - name: outgoing_free_cnt
        tests: [{ dbt_utils.expression_is_true: { expression: ">= 0" } }]
      - name: outgoing_paid_cnt
        tests: [{ dbt_utils.expression_is_true: { expression: ">= 0" } }]
      - name: outgoing_loan_cnt
        tests: [{ dbt_utils.expression_is_true: { expression: ">= 0" } }]
      - name: outgoing_loan_return_cnt
        tests: [{ dbt_utils.expression_is_true: { expression: ">= 0" } }]
      - name: transfer_spend
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"
      - name: transfer_income
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= 0"
  # -----------------------------------------------------------------------------
  # mart_competition_formation_season
  # -----------------------------------------------------------------------------
  - name: mart_competition_formation_season
    description: "League × season × formation performance: games, W/D/L, points per game, win rate."
    columns:
      - name: competition_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_competitions')
              field: competition_id
      - name: season
        tests:
          - not_null
      - name: club_formation
        tests:
          - not_null
      - name: games_played
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: wins
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: draws
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: losses
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: goals_for
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: goals_against
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: ppg
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} <= 3"
      - name: win_percentage
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} <= 100"

    tests:
      # UNIQUE grain
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: [ competition_id, season, club_formation ]

      # Model-level rules (DİKKAT: kolon adını düz yaz)
      - dbt_utils.expression_is_true:
          expression: "games_played = (wins + draws + losses)"
  # -----------------------------------------------------------------------------
  # mart_competition_performance_history
  # -----------------------------------------------------------------------------
  - name: mart_formation_performance_history
    description: "Global formation performance across all seasons."
    columns:
      - name: club_formation
        tests:
          - not_null
      - name: games_played
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: wins
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: draws
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: losses
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: goals_for
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: goals_against
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: ppg
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} <= 3"
      - name: win_percentage
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} <= 100"

    tests:
      - unique:
          column_name: club_formation
      - dbt_utils.expression_is_true:
          expression: "games_played = (wins + draws + losses)"
  # -----------------------------------------------------------------------------
  # mart_club_formation_season
  # -----------------------------------------------------------------------------
  - name: mart_club_formation_season
    description: "Club × Season × Formation performance: games, W/D/L, points per game, win rate."
    columns:
      - name: competition_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_competitions')
              field: competition_id

      - name: season
        tests:
          - not_null

      - name: club_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_clubs')
              field: club_id

      - name: club_formation
        tests:
          - not_null

      - name: games_played
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: wins
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: draws
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: losses
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: goals_for
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: goals_against
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: ppg
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} <= 3"

      - name: win_percentage
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} <= 100"

    tests:
      # Uniqueness per competition × season × club × formation
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: [ competition_id, season, club_id, club_formation ]

      # Games played must equal sum of W/D/L
      - dbt_utils.expression_is_true:
          name: mart_club_form_season_match_count_rule
          expression: "games_played = (wins + draws + losses)"
  # -----------------------------
  # mart_player_valuation_season
  # -----------------------------
  - name: mart_player_valuation_season
    description: "Player × Season valuation summary: start/end values, Δ, %Δ, peak, trough."
    columns:
      - name: player_id
        description: "Player ID."
        tests:
          - not_null
          - relationships:
              to: ref('stg_players')
              field: player_id

      - name: season
        description: "Season (July → June)."
        tests:
          - not_null

      - name: first_market_value
        description: "Market value at the start of the season."
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: last_market_value
        description: "Market value at the end of the season."
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: min_market_value
        description: "Lowest market value in the season."
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: max_market_value
        description: "Highest market value in the season."
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: value_change_amount
        description: "Absolute change between start and end of season."
        tests:
          - not_null

      - name: value_change_percentage
        description: "Percentage change from start to end of season."
        tests:
          - dbt_utils.accepted_range:
              min_value: -100
              max_value: 100000

    tests:
      # Grain: one row per player × season
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: [ player_id, season ]

      # Identity: max must be >= min
      - dbt_utils.expression_is_true:
          name: mart_pvs_min_max_rule
          expression: "max_market_value >= min_market_value"

      # Identity: value_change_amount = last - first
      - dbt_utils.expression_is_true:
          name: mart_pvs_delta_rule
          expression: "value_change_amount = (last_market_value - first_market_value)"
  # -----------------------------
  # mart_player_career_summary
  # -----------------------------
  - name: mart_player_career_summary
    description: "Player career summary with lifetime stats and metadata."
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: [ player_id ]

      # Per-game ratios must be NULL or >= 0
      - dbt_utils.expression_is_true:
          name: gpg_non_negative
          expression: "gpg IS NULL OR gpg >= 0"
      - dbt_utils.expression_is_true:
          name: apg_non_negative
          expression: "apg IS NULL OR apg >= 0"
      - dbt_utils.expression_is_true:
          name: tgc_pg_non_negative
          expression: "total_goal_contributions_pg IS NULL OR total_goal_contributions_pg >= 0"

    columns:
      - name: player_id
        tests:
          - not_null
          - relationships:
              to: ref('stg_players')
              field: player_id

      - name: total_matches
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: total_minutes
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: total_goals
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: total_assists
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"

      - name: total_goal_contributions
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} = (total_goals + total_assists)"
  # -----------------------------
  # mart_manager_performance
  # -----------------------------
  - name: mart_manager_performance
    columns:
      - name: season
        tests: [ not_null ]
      - name: manager_name
        tests: [ not_null ]
      - name: games_played
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
      - name: points
        tests:
          - dbt_utils.expression_is_true:
              expression: "{{ column_name }} >= 0"
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns: [ season, manager_name ]
